# -*- coding: utf-8 -*-
"""Tabular_Classification_Code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9ky7ptQDNa5bdn4BSypdbmDdWmdVBAg
"""



"""# Catboost"""

!pip install catboost

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization
import random


# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score

# Any results you write to the current directory are saved as output.
# ignore warnings
import warnings
warnings.filterwarnings("ignore")

SEED = 3

def seed_everything(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)

seed_everything(SEED) # SACeed 고정

df = pd.read_csv('/content/drive/MyDrive/train.csv')
df.loc[66,'PR_Allred_score'] = 3.0
df.loc[67,'PR_Allred_score'] = 4.0
df = df.drop(['HER2_SISH_ratio','암의 위치','ER','BRCA_mutation'],axis =1)


target_name = ['N_category']

# 범주형 변수
cat_col_names = ['진단명', '암의 개수', 'NG','HG','HG_score_1','HG_score_2','HG_score_3','DCIS_or_LCIS_여부','DCIS_or_LCIS_type','T_category','PR','HER2','HER2_IHC','HER2_SISH']

#수치형 
num_col_names = ['나이','암의 장경','ER_Allred_score','PR_Allred_score','KI-67_LI_percent']

for i in cat_col_names:
  df[i] = df[i].fillna(df[i].mode()[0])
  
for i in num_col_names:
  df[i] = df[i].fillna(df[i].median())


X = df[cat_col_names+num_col_names]
y = df[target_name]

def get_values(value):
    return value.values.reshape(-1, 1)

numeric_cols = ['나이', '암의 장경', 'ER_Allred_score', 'PR_Allred_score', 'KI-67_LI_percent', 'HER2_SISH_ratio']
ignore_cols = ['ID', 'img_path', 'mask_path', '수술연월일', 'N_category']

for col in df.columns:
    if col in ignore_cols:
        continue
    if col in numeric_cols:
        scaler = StandardScaler()
        df[col] = scaler.fit_transform(get_values(df[col]))

    else:
        le = LabelEncoder()
        df[col] = le.fit_transform(get_values(df[col]))

# split the dataset into the training set and test set

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = SEED)

clf = CatBoostClassifier() # 모델 선언

clf.fit(X_train,y_train) # 모델 학습

test_df = pd.read_csv('/content/drive/MyDrive/test_cancer_cls.csv')
test_df = test_df.drop(['HER2_SISH_ratio','암의 위치','ER','BRCA_mutation'],axis =1)




# 범주형 변수
cat_col_names = ['진단명', '암의 개수', 'NG','HG','HG_score_1','HG_score_2','HG_score_3','DCIS_or_LCIS_여부','DCIS_or_LCIS_type','T_category','PR','HER2','HER2_IHC','HER2_SISH']

#수치형 
num_col_names = ['나이','암의 장경','ER_Allred_score','PR_Allred_score','KI-67_LI_percent']

for i in cat_col_names:
  # test_df[i] = test_df[i].fillna(test_df[i].mode()[0])
  test_df[i] = test_df[i].fillna(0)
for i in num_col_names:
  # test_df[i] = test_df[i].fillna(test_df[i].median())
  test_df[i] = test_df[i].fillna(test_df[i].mean())


X_test = test_df[cat_col_names+num_col_names]

X_test

#mean 0
y_pred=clf.predict(X_test) # 예측 라벨

print(y_pred)

a = pd.read_csv('/content/sample_submission.csv')
a['N_category'] = y_pred

a.to_csv('./submission_catboost_train(0.8128).csv', encoding = 'utf-8-sig')



"""# Light Gradient Boosting Machine	"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization

import os
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
import lightgbm as lgb

import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('/content/drive/MyDrive/train.csv')
df.loc[66,'PR_Allred_score'] = 3.0
df.loc[67,'PR_Allred_score'] = 4.0
target_name = ['N_category']

# 범주형 변수
cat_col_names = ['진단명','암의 위치', '암의 개수', 'NG','HG','HG_score_1','HG_score_2','HG_score_3','DCIS_or_LCIS_여부','DCIS_or_LCIS_type','T_category','ER','PR','HER2','HER2_IHC','HER2_SISH','BRCA_mutation']

#수치형 
num_col_names = ['나이','암의 장경','ER_Allred_score','PR_Allred_score','KI-67_LI_percent','HER2_SISH_ratio']

for i in cat_col_names:
  # df[i] = df[i].fillna(df[i].mode()[0])
  df[i] = df[i].fillna(0)
for i in num_col_names:
  # df[i] = df[i].fillna(df[i].median())
  df[i] = df[i].fillna(df[i].mean())

X = df[cat_col_names+num_col_names]
y = df[target_name]

def get_values(value):
    return value.values.reshape(-1, 1)

numeric_cols = ['나이', '암의 장경', 'ER_Allred_score', 'PR_Allred_score', 'KI-67_LI_percent', 'HER2_SISH_ratio']
ignore_cols = ['ID', 'img_path', 'mask_path', '수술연월일', 'N_category']

for col in df.columns:
    if col in ignore_cols:
        continue
    if col in numeric_cols:
        scaler = StandardScaler()
        df[col] = scaler.fit_transform(get_values(df[col]))

    else:
        le = LabelEncoder()
        df[col] = le.fit_transform(get_values(df[col]))

# split the dataset into the training set and test set

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

clf = lgb.LGBMClassifier()
clf.fit(X_train,y_train)

a = pd.read_csv('/content/sample_submission.csv')
a['N_category'] = y_pred
a.to_csv('./submission_catboost_train(0.8128).csv', encoding = 'utf-8-sig')



"""# Gradient Boosting Classifier	"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization
import random

import os
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.ensemble import GradientBoostingClassifier

from sklearn.metrics import accuracy_score

import warnings
warnings.filterwarnings("ignore")

SEED = 3

def seed_everything(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)

seed_everything(SEED) # SACeed 고정

df = pd.read_csv('/content/drive/MyDrive/train.csv')
df.loc[66,'PR_Allred_score'] = 3.0
df.loc[67,'PR_Allred_score'] = 4.0
target_name = ['N_category']

# 범주형 변수
cat_col_names = ['진단명','암의 위치', '암의 개수', 'NG','HG','HG_score_1','HG_score_2','HG_score_3','DCIS_or_LCIS_여부','DCIS_or_LCIS_type','T_category','ER','PR','HER2','HER2_IHC','HER2_SISH','BRCA_mutation']

#수치형 
num_col_names = ['나이','암의 장경','ER_Allred_score','PR_Allred_score','KI-67_LI_percent','HER2_SISH_ratio']

for i in cat_col_names:
  df[i] = df[i].fillna(df[i].mode()[0])
  # df[i] = df[i].fillna(0)
for i in num_col_names:
  df[i] = df[i].fillna(df[i].median())
  # df[i] = df[i].fillna(df[i].mean())

X = df[cat_col_names+num_col_names]
y = df[target_name]

def get_values(value):
    return value.values.reshape(-1, 1)

numeric_cols = ['나이', '암의 장경', 'ER_Allred_score', 'PR_Allred_score', 'KI-67_LI_percent', 'HER2_SISH_ratio']
ignore_cols = ['ID', 'img_path', 'mask_path', '수술연월일', 'N_category']

for col in df.columns:
    if col in ignore_cols:
        continue
    if col in numeric_cols:
        scaler = StandardScaler()
        df[col] = scaler.fit_transform(get_values(df[col]))

    else:
        le = LabelEncoder()
        df[col] = le.fit_transform(get_values(df[col]))

# split the dataset into the training set and test set

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

clf = GradientBoostingClassifier()
clf.fit(X_train,y_train) # 모델 학습